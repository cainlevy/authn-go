package authn

import (
	"context"
	"net/http"
	"strconv"

	jwt "gopkg.in/square/go-jose.v2/jwt"
)

// TODO: jose/jwt references are all over the place. Refactor possible?

// Client provides JWT verification for ID tokens generated by the AuthN server. In the future it
// will also implement the server's private APIs (aka admin actions).
type Client struct {
	cli *Client2
}

// NewClient returns an initialized and configured Client.
func NewClient(config Config) (*Client, error) {
	cli, err := NewClient2(config)
	if err != nil {
		return nil, err
	}

	return &Client{cli}, nil
}

// SubjectFrom will return the subject inside the given idToken if and only if the token is a valid
// JWT that passes all verification requirements. The returned value is the AuthN server's account
// ID and should be used as a unique foreign key in your users data.
//
// If the JWT does not verify, the returned error will explain why. This is for debugging purposes.
func (ac *Client) SubjectFrom(idToken string) (string, error) {
	return ac.cli.SubjectFrom(idToken)
}

// SubjectFromWithAudience works like SubjectFrom but allows specifying a different
// JWT audience
func (ac *Client) SubjectFromWithAudience(idToken string, audience jwt.Audience) (string, error) {
	return ac.cli.SubjectFromWithAudience(idToken, audience)
}

// GetAccount gets the account with the associated id
func (ac *Client) GetAccount(id string) (*Account, error) { //Should this be a string or an int?
	accountID, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}
	return ac.cli.GetAccount(context.Background(), accountID)
}

// Update updates the account with the associated id
func (ac *Client) Update(id, username string) error {
	accountID, err := strconv.Atoi(id)
	if err != nil {
		return err
	}
	return ac.cli.Update(context.Background(), accountID, username)
}

// LockAccount locks the account with the associated id
func (ac *Client) LockAccount(id string) error {
	accountID, err := strconv.Atoi(id)
	if err != nil {
		return err
	}
	return ac.cli.LockAccount(context.Background(), accountID)
}

// UnlockAccount unlocks the account with the associated id
func (ac *Client) UnlockAccount(id string) error {
	accountID, err := strconv.Atoi(id)
	if err != nil {
		return err
	}
	return ac.cli.UnlockAccount(context.Background(), accountID)
}

// ArchiveAccount archives the account with the associated id
func (ac *Client) ArchiveAccount(id string) error {
	accountID, err := strconv.Atoi(id)
	if err != nil {
		return err
	}
	return ac.cli.ArchiveAccount(context.Background(), accountID)
}

// ImportAccount imports an account with the provided information, returns the imported account id
func (ac *Client) ImportAccount(username, password string, locked bool) (int, error) {
	return ac.cli.ImportAccount(context.Background(), username, password, locked)
}

// ExpirePassword expires the password of the account with the associated id
func (ac *Client) ExpirePassword(id string) error {
	accountID, err := strconv.Atoi(id)
	if err != nil {
		return err
	}
	return ac.cli.ExpirePassword(context.Background(), accountID)
}

// ServiceStats gets the http response object from calling the service stats endpoint
func (ac *Client) ServiceStats() (*http.Response, error) {
	return ac.cli.ServiceStats(context.Background())
}

// ServerStats gets the http response object from calling the server stats endpoint
func (ac *Client) ServerStats() (*http.Response, error) {
	return ac.cli.ServerStats(context.Background())
}

// DefaultClient can be initialized by Configure and used by SubjectFrom.
var DefaultClient *Client

func defaultClient() *Client {
	if DefaultClient == nil {
		panic("Please initialize DefaultClient using Configure")
	}
	return DefaultClient
}

// Configure initializes the default AuthN client with the given config. This is necessary to
// use authn.SubjectFrom without keeping a reference to your own AuthN client.
func Configure(config Config) error {
	client, err := NewClient(config)
	if err != nil {
		return err
	}
	DefaultClient = client
	return nil
}

// SubjectFrom will use the the client configured by Configure to extract a subject from the
// given idToken.
func SubjectFrom(idToken string) (string, error) {
	return defaultClient().SubjectFrom(idToken)
}
